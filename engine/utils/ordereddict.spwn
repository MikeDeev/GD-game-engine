#[cache_output]

new_wo_key = (dict, key) {
	let new = {}
	for k in dict.keys() {
		if k != key || !(k in key) {
			new.set(k, dict[k])
		}
	}
	return new
}

b64e = $.b64encode
b64d = $.b64decode

type @ordereddict
impl @ordereddict {

	new: #[desc("Creates a new, empty ordered dictionary.")]
	() {
		return @ordereddict::{
			_map: {},
			_dict: [],
		}
	},

	set: #[desc("Sets a key to a value, in the ordered dictionary.")]
	(
		self,
		#[desc("The key of the element.")]
		key: @number|@string,
		#[desc("The value of the element.")]
		value,
	) {
		self._dict.push([key, value])
		self._map.set(b64e(key), self._dict.length - 1)
	},

	get: #[desc("Gets a key from the ordered dictionary.")]
	(
		self,
		#[desc("The key of the element.")]
		key: @number|@string,
	) {
		return self._dict[
			self._map.get(b64e(key))
		][1]
	},

	del: #[desc("Deletes a key from the ordered dictionary.")] 
	(
		self,
		#[desc("The key of the element.")]
		key: @number|@string,
	) {
		let key = b64e(key)
		index = self._map.get(key)
		$.remove_index(self._dict, index)
		self._map = new_wo_key(self._map, key)
		self._update_map()
	},

	del_start: #[desc("Deletes the key at the start of the ordered dictionary.")]
	(self) {
		self.del(self._dict[0][1])
	},

	del_end: #[desc("Deletes the key at the end of the ordered dictionary.")]
	(self) {
		self.del(self._dict[-1][1])
	},

	unshift: #[desc("Inserts and returns a key and value to the begging of the ordered dictionary.")]
	(
		self,
		#[desc("The key of the element.")]
		key: @number|@string,
		#[desc("The value of the element.")]
		value,
	) {
		let val = self._dict.unshift([key, value])
		self._update_map()
		self._map.set(b64e(key), 0)
		return val
	},

	keys: #[desc("Returns the keys of the ordered dictionary.")]
	(self) {
		return self._dict.map(v => v[0])
	},

	values: #[desc("Returns the values of the ordered dictionary.")]
	(self) {
		return self._dict.map(v => v[1])
	},

	items: #[desc("Returns the key + value pairs of the ordered dictionary.")]
	(self) {
		return self._dict
	},

	to_kv_array: #[desc("Equivalent to `.items()`")]
	(self) {
		return self.items()
	},

	map: #[desc("Maps key + values of the ordered dictionary.")]
	(
		self,
		#[desc("The macro to be called. An array in the format `[key, value]` is passed as an argument.")]
		macro: @macro
	) {
		return self._dict.map(v => macro(v))
	},

	clone_without: #[desc("Create a clone of the ordered dictionary, with the provided keys removed.")]
	(
		self,
		#[desc("A single key or array of keys that will be ignored when cloning the dictionary.")]
		keys: @number|@string | [@number|@string],
	) {
		let new = @ordereddict::new()
		new._dict = self._dict.filter(k => !(k[0] in keys))
		new._update_map()
		return new
	},

	to_unordered_dict: #[desc("Converts the ordered dictionary to a standard dictionary.")]
	(self) {
		let dict = {}

		for v in self._dict {
			dict.set(v[0], v[1])
		}

		return dict
	},

	combine: #[desc("Combines another dictionary (ordered or unordered) with the current ordered dictionary.")]
	(
		self,
		#[desc("Combines another object with the current object. Will keep the order of the keys if an `@ordereddict` is given.")]
		extra: @ordereddict | @dictionary
	) {
		for i in extra.items() {
			self.set(i[0], i[1])
		}
		self._update_map()
	},

	is_empty: #[desc("Returns whether the ordered dictionary is empty.")]
	(self) {
		return self.length() == 0
	},

	length: #[desc("Returns the length of the ordered dictionary.")]
	(self) {
		return self._dict.length
	},

	_equal_: (self, other: @ordereddict) {
		return self._dict == other._dict
	},

	has: (
		self,
		key: @number|@string
	) {
		return b64e(key) in self._map.keys()
	},

	_as_: (self, type_indicator) {
		if type_indicator == @string {
			return "ordereddict::{" + ", ".join(self._dict.map(v => "{}: {}".fmt([v[0], v[1]]))) + "}"
		}
		else if type_indicator == @dictionary {
			return self.to_unordered_dict()
		}
		return null
	},

	_display_: (self) {
		return self._as_(@string)
	},

	_update_map: (self) {
		for o in self._dict.enumerate() {
			self._map.set(b64e(o[1][0]), o[0])
		}
	},
}

return {
	ordereddict: @ordereddict
}



